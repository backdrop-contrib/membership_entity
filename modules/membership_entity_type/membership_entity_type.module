<?php

/**
 * @file
 * Allows users to create different types of memberships.
 */

/**
 * Implements hook_help().
 */
function membership_entity_type_help($path, $arg) {
  switch ($path) {
    // @TODO add help documentation
  }
}

/**
 * Implements hook_entity_info().
 */
function membership_entity_type_entity_info() {
  $info['membership_entity_type'] = array(
    'label' => t('Membership type'),
    'plural label' => t('Membership types'),
    'description' => t('Types of memberships.'),
    'entity class' => 'MembershipEntityType',
    'controller class' => 'MembershipEntityTypeController',
    'base table' => 'membership_entity_type',
    'fieldable' => FALSE,
    'bundle of' => 'membership_entity',
    'exportable' => TRUE,
    'entity keys' => array(
      'id' => 'id',
      'name' => 'type',
      'label' => 'label',
    ),
    'access callback' => 'membership_entity_type_admin_ui_access',
    'module' => 'membership_entity_type',
    'admin ui' => array(
      // This will override the path defined in membership_entity_menu().
      // @see membership_entity_type_menu_alter().
      'path' => 'admin/structure/memberships',
      'file' => 'membership_entity_type.ui.inc',
      'menu wildcard' => '%membership_entity_type',
      'controller class' => 'MembershipEntityTypeUIController',
    ),
  );

  return $info;
}

/**
 *  Access callback for membership entity type admin ui.
 */
function membership_entity_type_admin_ui_access($op, $type = NULL, $account = NULL) {
  return user_access('administer membership types', $account);
}

/**
 * Implements hook_permission().
 */
function membership_entity_type_permission() {
  $perms = array(
    'administer membership types' => array(
      'title' => t('Administer membership types'),
      'restrict access' => TRUE,
    ),
  );

  foreach (membership_entity_type_get_types() as $type_name => $type) {
    $perms += array(
      $type_name . ' join' => array(
        'title' => t('Join as a %type member', array('%type' => $type->label)),
      ),
      $type_name . ' renew any membership' => array(
        'title' => t('Renew any %type membership', array('%type' => $type->label)),
      ),
      $type_name . ' renew own membership' => array(
        'title' => t('Renew own %type membership', array('%type' => $type->label)),
      ),
      $type_name . ' view any membership' => array(
        'title' => t('View any %type membership', array('%type' => $type->label)),
      ),
      $type_name . ' view own membership' => array(
        'title' => t('View own %type membership', array('%type' => $type->label)),
      ),
      $type_name . ' edit any membership' => array(
        'title' => t('Edit any %type membership', array('%type' => $type->label)),
      ),
      $type_name . ' edit own membership' => array(
        'title' => t('Edit own %type membership', array('%type' => $type->label)),
      ),
      $type_name . ' delete any membership' => array(
        'title' => t('Delete any %type membership', array('%type' => $type->label)),
      ),
      $type_name . ' delete own membership' => array(
        'title' => t('Delete own %type membership', array('%type' => $type->label)),
      ),
    );
  }
  return $perms;
}

/**
 * Implements hook_menu().
 */
function membership_entity_type_menu() {
  $items = array();

  foreach (membership_entity_type_get_types() as $type) {
    $type_url_str = str_replace('_', '-', $type->type);

    $items['admin/memberships/add/' . $type_url_str] = array(
      'title' => $type->label,
      'title callback' => 'check_plain',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_entity_edit_form', NULL, $type->type),
      'access arguments' => array('administer memberships'),
      'description' => $type->description,
      'file' => 'membership_entity.pages.inc',
      'file path' => drupal_get_path('module', 'membership_entity'),
    );

    $items['user/join/' . $type_url_str] = array(
      'title' => $type->label,
      'title callback' => 'check_plain',
      'description' => $type->description,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_entity_join_form'),
      'access callback' => 'membership_entity_access',
      'access arguments' => array('join', $type->type),
      'file' => 'membership_entity.pages.inc',
      'file path' => drupal_get_path('module', 'membership_entity'),
    );
  }
  return $items;
}

/**
 * Implements hook_menu_alter().
 */
function membership_entity_type_menu_alter(&$items) {
  // I reject your settings and substitue my own.
  unset($items['admin/structure/memberships/settings']);
  $path = 'admin/structure/memberships';
  $ui = entity_ui_controller('membership_entity_type')->hook_menu();
  if (isset($ui[$path])) {
    $items[$path] = $ui[$path];
    $items[$path]['module'] = 'entity';
  }

  // Override the membership add page.
  $path = 'admin/memberships/add';
  $items[$path] = array_merge($items[$path], array(
    'page callback' => 'membership_entity_type_membership_add_page',
    'page arguments' => array(),
    'file' => 'membership_entity_type.pages.inc',
    'module' => 'membership_entity_type',
    'type' => MENU_NORMAL_ITEM,
  ));

  // Override the join page.
  $path = 'user/join';
  $items[$path] = array_merge($items[$path], array(
    'page callback' => 'membership_entity_type_membership_add_page',
    'access callback' => TRUE,
    'file' => 'membership_entity_type.pages.inc',
    'module' => 'membership_entity_type',
  ));
}

/**
 * Implements hook_admin_menu_map().
 */
function membership_entity_type_admin_menu_map() {
  if (!user_access('administer membership types')) {
    return;
  }
  return array(
    'admin/structure/memberships/manage/%membership_entity_type' => array(
      'parent' => 'admin/structure/memberships',
      'arguments' => array(
        array('%membership_entity_type' => array_keys(membership_entity_type_get_types())),
      ),
    ),
  );
}

/**
 * Implements hook_theme().
 */
function membership_entity_type_theme($existing, $type, $theme, $path) {
  return array(
    'membership_entity_type_add_list' => array(
      'variables' => array('content' => NULL),
      'file' => 'membership_entity_type.pages.inc',
    ),
  );
}

/**
 * Returns a list of membership types.
 */
function membership_entity_type_get_types($type = NULL) {
  $types = db_select('membership_entity_type', 't')
    ->fields('t', array('id', 'type', 'label', 'description'))
    ->execute()
    ->fetchAllAssoc('type');
  return isset($type) ? reset($types) : $types;
}

/**
 * Create a new membership entity type with default values.
 */
function membership_entity_type_create($values = array()) {
  return entity_create('membership_entity_type', $values);
}

/**
 * Load a membership type object.
 */
function membership_entity_type_load($id = NULL, $reset = FALSE) {
  $types = membership_entity_type_load_multiple(array($id), array(), $reset);
  return is_array($types) ? reset($types) : FALSE;
}

/**
 * Loads multiple membership type objects.
 */
function membership_entity_type_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('membership_entity_type', $ids, $conditions, $reset);
}

/**
 * Save a membership entity type.
 */
function membership_entity_type_save(&$type) {
  return entity_save('membership_entity_type', $type);
}

/**
 * Delete a membership entity type.
 */
function membership_entity_type_delete($id) {
  membership_entity_type_delete_multiple(array($id));
}

/**
 * Delete multiple membership entities.
 */
function membership_entity_type_delete_multiple($ids) {
  entity_delete_multiple('membership_entity_type', $ids);
}

/**
 * Returns a list of membership type names.
 */
function membership_entity_type_get_names() {
  $types = membership_entity_type_get_types();
  $names = array();
  foreach ($types as $type) {
    $names[$type->type] = $type->label;
  }
  return $names;
}

/**
 * Returns the human readable name of a membership object type.
 *
 * @param $membership
 *  The membership object to get the type name.
 */
function membership_entity_type_get_name($membership) {
  $names = membership_entity_get_type_names();
  return isset($names[$membership->type]) ? $names[$membership->type] : '';
}

/**
 * Title callback for a membership type.
 */
function membership_entity_type_page_title($type) {
  return $type->label;
}

/**
 * Implements hook_forms().
 */
function membership_entity_forms() {
  $forms = array();
  if ($types = membership_entity_type_get_types()) {
    foreach ($types as $type) {
      $forms[$type->type . '_membership_entity_edit_form']['callback'] = 'membership_entity_edit_form';
    }
  }
  return $forms;
}
