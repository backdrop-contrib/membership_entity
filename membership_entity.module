<?php

/**
 * @file
 * Allows users to create membership entities.
 */

/**
 * Membership is disabled.
 */
define('MEMBERSHIP_ENTITY_EXPIRED', 0);

/**
 * Membership is active.
 */
define('MEMBERSHIP_ENTITY_ACTIVE', 1);

/**
 * Membership was cancelled before it expires.
 */
define('MEMBERSHIP_ENTITY_CANCELLED', 2);

/**
 * The membership is pending admin approval.
 */
define('MEMBERSHIP_ENTITY_PENDING', 3);

/**
 * Implements hook_help().
 */
function membership_entity_help($path, $arg) {
  switch ($path) {
    // @TODO add help documentation
  }
}

/**
 * Implements hook_views_api().
 */
function membership_entity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'membership_entity') . '/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function membership_entity_entity_info() {
  $info['membership_entity'] = array(
    'label' => t('Membership'),
    'plural label' => t('Membershps'),
    'entity class' => 'MembershipEntity',
    'controller class' => 'EntityAPIController',
    'base table' => 'membership_entity',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'mid' ,
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Membership'),
        'custom settings' =>  FALSE,
      ),
      'account' => array(
        'label' => t('User account page'),
        'custom settings' =>  FALSE,
      ),
    ),
  );

  if (module_exists('membership_entity_type')) {
    // Add user defined bundles.
    foreach (membership_entity_get_types() as $bundle => $type) {
      $info['membership_entity']['bundles'][$bundle] = array(
        'label' => $type->name,
        'admin' => array(
          'path' => 'admin/structure/membership-types/manage/%membership_entity_type',
          'real path' => 'admin/structure/membership-types/manage/' . str_replace('_', '-', $type->type),
          'bundle argument' => 4,
          'access arguments' => array('administer membership types'),
        ),
      );
    }
  }
  else {
    // Add a default bundle.
    $info['membership_entity']['bundles']['membership'] = array(
      'label' => t('Membership'),
      'admin' => array(
        'path' => 'admin/structure/memberships',
        'access arguments' => array('administer memberships'),
      ),
    );
  }

  return $info;
}

/**
 * Implements hook_permission().
 */
function membership_entity_permission() {
  return array(
    'administer memberships' => array(
      'title' => t('Administer memberships'),
      'restrict access' => TRUE,
    ),
    'access join page' => array(
      'title' => t('Join @site', array('@site' => variable_get('site_name', ''))),
    ),
  );
}

/**
 * Membership entity access callback.
 *
 * @param $op
 *  The membership operations. Valid values are 'join', 'renew', 'manage',
 *  'view', 'edit', or 'delete'.
 * @param $membership
 *  The membership object.
 * @param $account
 *  The user account to check access. Defaults to logged in user.
 * @return boolean
 *  TRUE if the user has access for the given operation.
 */
function membership_entity_access($op, $membership = NULL, $account = NULL) {
  if (user_access('administer memberships', $account)) {
    return TRUE;
  }

  // Allow modules to grant or deny access.
  $access = module_invoke_all('membership_entity_access', $op, $membership, $account);

  // Grant access if a module grants access and no one denies access.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_membership_entity_access().
 */
function membership_entity_membership_entity_access($op, $membership = NULL, $account = NULL) {
  $user = isset($account) ? $account : $GLOBALS['user'];

  // Join page access.
  if ($op == 'join') {
    // See if a membership exists for this user.
    $efq = new EntityFieldQuery();
    $results = $efq->entityCondition('entity_type', 'membership_entity')
      ->propertyCondition('uid', $user->uid)
      ->propertyCondition('uid', 0, '<>')
      ->range(0, 1)
      ->execute();
    if (empty($results['membership_entity']) && user_access('access join page')) {
      return TRUE;
    }
  }

  if (isset($membership) && $type_name = $membership->type) {
    if (user_access("$type_name $op any membership", $user)) {
      return TRUE;
    }

    if (user_access("$type_name $op own membership", $user) && $membership->uid == $user->uid) {
      return TRUE;
    }

    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'membership_entity')
      ->entityCondition('bundle', $type_name)
      ->fieldCondition($type_name . '_members', 'target_id', $user->uid)
      ->execute();
    if (!empty($result['membership_entity'])
      && in_array($membership->mid, array_keys($result['membership_entity']))) {

      // Can secondary members edit the membership?
      if ($op == 'edit' && variable_get('membership_entity_all_edit_' . $type_name, FALSE)
        && user_access("$type edit own membership", $user)) {
        return TRUE;
      }

      // Can secondary members view the membership?
      if ($op == 'view' && user_access("$type view own membership", $user)) {
        return TRUE;
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function membership_entity_menu() {
  if (!module_exists('membership_entity_types')) {
    $items['admin/structure/memberships'] = array(
      'title' => 'Memberships',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_entity_settings_form'),
      'access arguments' => array('administer memberships'),
      'file' => 'membership_entity.admin.inc',
    );

    $items['admin/structure/memberships/settings'] = array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
  }

  $items['admin/memberships'] = array(
    'title' => 'Memberships',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_admin_memberships'),
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.admin.inc',
  );

  $items['admin/memberships/add'] = array(
    'title' => 'Add a membership',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'membership_entity_add',
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.pages.inc',
  );

  $items['membership/%membership_entity'] = array(
    'title callback' => 'membership_entity_page_title',
    'title arguments' => array(1),
    'page callback' => 'membership_entity_view',
    'page arguments' => array(1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('view', 1),
  );
  $items['membership/%membership_entity/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['membership/%membership_entity/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'membership_entity_edit',
    'page arguments' => array(1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('edit', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership/%membership_entity/renew'] = array(
    'title' => 'Renew',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_renew', 1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('renew', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership/%membership_entity/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_delete_confirm', 1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('delete', 1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership-entity/%membership_entity/user/autocomplete/%'] = array(
    'page callback' => 'membership_entity_user_autocomplete',
    'page arguments' => array(4),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_CALLBACK,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership-entity/join'] = array(
    'title' => 'Join @site',
    'title arguments' => array('@site' => variable_get('site_name', '')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_join'),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('join'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'membership_entity.pages.inc',
  );

  // Add support for devel generate.
  if (module_exists('devel_generate')) {
    $items['admin/config/development/generate/membership-entity'] = array(
      'title' => 'Generate memberships',
      'description' => 'Generate a given number of memberships. Optionally delete current memberships.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_entity_devel_generate_memberships_form'),
      'access arguments' => array('administer memberships'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'membership_entity.devel.inc',
    );
  }

  return $items;
}

/**
 * Implements hook_cron().
 */
function membership_entity_cron() {
  // Find all expired memberships.
  $subquery = db_select('membership_entity_terms', 't');
  $subquery->addField('t', 'mid');
  $subquery->addExpression('MIN(end)', 'min_end');
  $subquery->addExpression('MAX(end)', 'max_end');
  $subquery->groupBy('t.mid');

  $query = db_select('membership_entity', 'm');
  $query->join($subquery, 't', 'm.mid=t.mid');
  $query->addField('m', 'mid');
  $query->condition('t.max_end', array(0, REQUEST_TIME), 'BETWEEN');
  $query->condition('t.min_end', MEMBERSHIP_ENTITY_LIFETIME_TERM, '<>');
  $result = $query->execute()
    ->fetchAllAssoc('mid');

  // Queue them up for expiration.
  $queue = DrupalQueue::get('membership_entity_expire');
  foreach (array_keys($result) as $mid) {
    $queue->createItem($mid);
  }
}

/**
 * Implements hook_cron_queue_info().
 */
function membership_entity_cron_queue_info() {
  $queues['membership_entity_expire'] = array(
    'worker callback' => 'membership_entity_expire_worker',
    'time' => 60,
  );
  return $queues;
}

/**
 * Worker callback to process membership expirations.
 */
function membership_entity_expire_worker($data) {
  $membership = membership_entity_load($data);
  $membership->status = MEMBERSHIP_ENTITY_EXPIRED;
  membership_entity_save($membership);
}

/**
 * Implements hook_admin_paths().
 */
function membership_entity_admin_paths() {
  return array(
    // @TODO add admin paths.
  );
}

/**
 * Implements hook_theme().
 */
function membership_entity_theme() {
  return array(
    // @TODO: Theme a membership.
    'membership_entity_available_term_lengths' => array(
      'render element' => 'element',
      'file' => 'membership_entity.admin.inc',
    ),
  );
}

/**
 * Implements hook_user_view().
 *
 * Add membership data to the user page.
 */
function membership_entity_user_view($account, $view_mode, $langcode) {
  foreach (membership_entity_get_types() as $type_name => $type) {
    if ($memberships = membership_entity_load_by_user($account, $type_name)) {
      foreach ($memberships as $mid => $membership) {
        $account->content['memberships'][$mid] = membership_entity_view($membership, 'account');
      }
    }
  }
}

/**
 * Add default fields to a membership entity type.
 *
 * @param $type
 *   A membership entity type object.
 */
function membership_entity_add_fields($type) {
  $fields = array();
  $instances = array();

  // Add the additional members field if cardinality is not 1.
  $cardinality = (int) variable_get('membership_entity_cardinality_' . $type->type, 0);
  if ($cardinality > 1 || $cardinality == FIELD_CARDINALITY_UNLIMITED) {
    // We must create a separate member reference field for each membership type
    // because we can only control cardinality at the field level.
    $fields[$type->type . '_members'] = array(
      'type' => 'entityreference',
      // Subtract 1 for primary member (unless unlimited).
      'cardinality' => ($cardinality == FIELD_CARDINALITY_UNLIMITED) ? FIELD_CARDINALITY_UNLIMITED : $cardinality - 1,
      'settings' => array(
        'target_type' => 'user',
      ),
    );

    $instances[$type->type . '_members'] = array(
      'label' => t('Additional Members'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
        'weight' => 99,
      ),
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'entityreference_entity_id',
        ),
      ),
    );
  }

  // Create the fields.
  foreach ($fields as $field_name => $settings) {
    $field = field_info_field($field_name);
    if (empty($field)) {
      $field = array_merge(array(
        'field_name' => $field_name,
        'entity_types' => array('membership_entity'),
        'locked' => TRUE, // No editing allowed!
      ), $settings);
      $field = field_create_field($field);
    }
  }

  // Create the instances.
  foreach ($instances as $field_name => $settings) {
    $instance = field_info_instance('membership_entity', $field_name, $type->type);
    if (empty($instance)) {
      $instance = array_merge(array(
        'field_name' => $field_name,
        'entity_type' => 'membership_entity',
        'bundle' => $type->type,
      ), $settings);
      $instance = field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_membership_entity_operations().
 */
function membership_entity_membership_entity_operations() {
  return array(
    'delete' => array(
      'label' => t('Delete selected memberships'),
      'callback' => NULL,
    ),
  );
}

/**
 * Load a membership object.
 *
 * @param $mid
 *   Integer specifying the membership entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded membership object or FALSE if it cannot be loaded.
 */
function membership_entity_load($mid = NULL, $reset = FALSE) {
  $mids = isset($mid) ? array($mid) : array();
  $membership = membership_entity_load_multiple($mids, array(), $reset);
  return $membership ? reset($membership) : FALSE;
}

/**
 * Load all memberships for a given user.
 *
 * @param $account
 *  A user account object or uid.
 * @param $type
 *  Load a specific membership type.
 */
function membership_entity_load_by_user($account, $type_name = NULL) {
  // Support uid or entire user object.
  $uid = is_object($account) ? $account->uid : $account;
  $cache = &drupal_static(__FUNCTION__, array());

  // If no type is given, load them all.
  if (empty($type_name)) {
    foreach (membership_entity_get_types() as $type) {
      $cache[$uid][$type->type] = membership_entity_load_by_user($uid, $type->type);
    }
  }

  if (!isset($cache[$uid][$type->type])) {
    $mids = array();
    // Load primary memberships.
    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'membership_entity')
      ->entityCondition('bundle', $type_name)
      ->propertyCondition('uid', $uid)
      ->execute();
    if (!empty($result)) {
      $mids = array_merge($mids, array_keys($result['membership_entity']));
    }

    // Load secondary memberships.
    if ($instance = field_info_instance('membership_entity', $type_name . '_members', $type_name)) {
      $efq = new EntityFieldQuery();
      $result = $efq->entityCondition('entity_type', 'membership_entity')
        ->entityCondition('bundle', $type_name)
        ->fieldCondition($type_name . '_members', 'target_id', $uid)
        ->execute();
      if (!empty($result)) {
        $mids = array_merge($mids, array_keys($result['membership_entity']));
      }
    }
    $cache[$uid][$type_name] = membership_entity_load_multiple($mids);
  }
  return !empty($type_name) ? $cache[$uid][$type_name] : $cache[$uid];
}

/**
 * Loads multiple membership objects.
 */
function membership_entity_load_multiple($mids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('membership_entity', $mids, $conditions, $reset);
}

/**
 * Menu callback: Display a membership.
 *
 * Invokes a number of hooks to prepare the membership for display.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function membership_entity_view($membership, $view_mode = 'full') {
  $entity_type = 'membership_entity';
  $type = membership_entity_type_load($membership->type);
  $account = user_load($membership->uid);

  $membership->content = array(
    '#view_mode' => $view_mode,
  );

  if ($view_mode == 'full') {
    drupal_set_title(t('@type: @id', array(
      '@type' => $type->name,
      '@id' => $membership->member_id,
    )));
  }

  $membership->content['uid'] = array(
    'label' => array(
      '#theme_wrappers' => array('container'),
      '#attributes' => array('class' => array('membership-entity-label')),
      '#markup' => t('Primary Member:') . '&nbsp',
    ),
    'link' => array(
      '#theme' => 'link',
      '#text' => format_username($account),
      '#path' => 'user/' . $account->uid,
      '#options' => array(
        'attributes' => array('class' => array('membership-entity-primary-member')),
        'html' => FALSE,
      ),
    ),
  );

  // Build custom field content.
  field_attach_prepare_view($entity_type, array($membership->mid => $membership), $view_mode);
  entity_prepare_view($entity_type, array($membership->mid => $membership));
  $membership->content += field_attach_view($entity_type, $membership, $view_mode);

  // Display the membership terms.
  $membership->content['terms'] = array(
    '#theme' => 'table',
    '#caption' => t('Membership Terms'),
    '#header' => array(
      t('Term length'),
      t('Start Date'),
      t('End Date'),
    ),
    '#rows' => array(),
    '#attributes' => array('id' => 'membership-entity-terms'),
  );
  foreach ($membership->terms as $delta => $term) {
    $membership->content['terms']['#rows'][] = array(
      array('data' => $term['term_length']),
      array('data' => format_date($term['start'], 'short')),
      array('data' => ($term['end'] == MEMBERSHIP_ENTITY_LIFETIME_TERM) ? t('N/A') : format_date($term['end'], 'short')),
    );
  }

  // Display the membership on user account pages.
  if ($view_mode == 'account' && variable_get('membership_entity_show_on_profile_' . $membership->type)) {
    $membership->content = array(
      '#type' => 'fieldset',
      '#title' => t('@type: @member_id', array(
        '@type' => $type->name,
        '@member_id' => $membership->member_id,
      )),
      'content' => $membership->content,
      'links' => array(
        '#theme_wrappers' => array('container'),
        '#attributes' => array(
          'class' => array('membership-entity-links'),
        ),
        '#weight' => 99,
        'view' => array(
          '#theme' => 'link',
          '#text' => t('View full membership'),
          '#path' => 'membership/' . $membership->mid,
          '#options' => array(
            'attributes' => array(),
            'html' => FALSE,
          ),
          '#access' => membership_entity_access('view', $membership),
        ),
        'edit' => array(
          '#theme' => 'link',
          '#text' => t('Edit membership'),
          '#path' => 'membership/' . $membership->mid . '/edit',
          '#options' => array(
            'attributes' => array(),
            'html' => FALSE,
          ),
          '#access' => membership_entity_access('edit', $membership),
        ),
      ),
    );
  }

  // Invoke hook_entity_view() and hook_entity_view_alter().
  $langcode = $GLOBALS['language']->language ;
  module_invoke_all('entity_view', $membership, $entity_type, $view_mode, $langcode);
  drupal_alter(array('entity_membership_entity_view', 'entity_view'), $membership->content, $entity_type);

  return $membership->content;
}

/**
 * Implements hook_field_extra_fields().
 */
function membership_entity_field_extra_fields() {
  $fields = array();
  foreach (membership_entity_get_types() as $type_name => $type) {
    $fields['membership_entity'][$type_name] = array(
      'form' => array(
        'uid' => array(
          'label' => t('Primary member'),
          'description' => t('The primary member the membership.'),
          'weight' => 0,
        ),
      ),
      'display' => array(
        'uid' => array(
          'label' => t('Primary member'),
          'description' => t('The primary member the membership.'),
          'weight' => 0,
        ),
        'terms' => array(
          'label' => t('Membership terms'),
          'description' => t('A table of membership terms and renewals.'),
          'weight' => 9999,
        ),
      ),
    );
  }
  return $fields;
}

/**
 * Entity uri callback.
 */
function membership_entity_uri($membership) {
  return array(
    'path' => 'membership/' . $membership->mid,
  );
}

/**
 * Increment and return the next available member id.
 */
function membership_entity_next_member_id() {
  $member_id = membership_entity_numeric_member_id_callback();

  // Make sure the member_id is unique.
  if ((bool) db_select('membership_entity', 'me')->fields('me', array('mid'))->condition('member_id', db_like($member_id), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    return membership_entity_next_member_id();
  }
  return $member_id;
}

/**
 * Callback to generate sequential numeric member ids.
 */
function membership_entity_numeric_member_id_callback() {
  $member_id = variable_get('membership_entity_next_member_id', 0);
  variable_set('membership_entity_next_member_id', ++$member_id);
  return $member_id;
}

/**
 * Helper function to add or remove active and expired roles from a member.
 *
 * @param $membership
 *  A membership object. Must include at minimum uid, type, and status.
 * @return boolean
 *  TRUE if the membership has expired.
 */
function membership_entity_update_user_role($membership) {
  $member = user_load($membership->uid);
  $active_role = user_role_load(variable_get('membership_entity_active_role_' . $membership->type, NULL));
  $expired_role = user_role_load(variable_get('membership_entity_expired_role_' . $membership->type, NULL));

  switch ($membership->status) {
    case MEMBERSHIP_ENTITY_ACTIVE:
      // Add the Active role.
      $member->roles[$active_role->rid] = $active_role->name;
      // Remove the Expired role.
      unset($member->roles[$expired_role->rid]);
      break;

    case MEMBERSHIP_ENTITY_EXPIRED:
      // Add Expired role.
      $member->roles[$expired_role->rid] = $expired_role->name;
      // Remove Active role.
      unset($member->roles[$active_role->rid]);
      break;

    case MEMBERSHIP_ENTITY_CANCELLED:
    case MEMBERSHIP_ENTITY_PENDING:
      // Remove both active and expired roles.
      unset($member->roles[$expired_role->rid]);
      unset($member->roles[$active_role->rid]);
      break;
  }

  // Save the member.
  user_save($member);
}

/**
 * Prepare a membership object for the edit form.
 */
function membership_entity_prepare_form($membership) {
  // Make sure terms are sorted by delta and add the current term length.
  $sort = array();
  foreach ($membership->terms as $key => $row) {
    $sort[$key] = $row['delta'];
  }
  array_multisort($sort, SORT_ASC, $membership->terms);
  $current = end($membership->terms);
  $membership->current_term_length = $current['term_length'];

  return $membership;
}

/**
 * Prepare a membership object for saving.
 */
function membership_entity_prepare_save($membership) {
  $new = empty($membership->mid);
  $renewal = !empty($membership->is_renewal);
  $term_length = $membership->current_term_length;

  // Get the latest term.
  $max = array();
  foreach ($membership->terms as $key => $row) {
    $max[$key] = $row['delta'];
  }
  $latest_delta = !empty($max) ? max($max) : -1;
  $latest_term = isset($membership->terms[$latest_delta]) ? $membership->terms[$latest_delta] : array();

  if ($new || $renewal) {
    if (!empty($latest_term['end']) && $latest_term['end'] >= REQUEST_TIME) {
      // If the latest term hasn't expired, then the new term starts when
      // the latest term ends.
      $start = $latest_term['end'];
    }
    else if ($renewal) {
      // If this is a renewal and the membership has expired, then the new
      // term starts now.
      $start = REQUEST_TIME;
    }
    else {
      $start = $membership->created;
    }

    // Add the new term.
    $membership->terms[] = array(
      'delta' => $latest_delta + 1,
      'start' => $start,
      'end' => ($term_length == 'lifetime') ? MEMBERSHIP_ENTITY_LIFETIME_TERM : strtotime($term_length, $start),
      'term_length' => $term_length,
    );
  }
  else if (!empty($latest_term) && ($term_length != $latest_term['term_length'])) {
    // Update the latest term.
    $membership->terms[$latest_delta]['term_length'] = $term_length;
    $membership->terms[$latest_delta]['end'] = ($term_length == 'lifetime') ? MEMBERSHIP_ENTITY_LIFETIME_TERM : strtotime($term_length, $latest_term['start']);
  }

  return $membership;
}

/**
 * Save a membership entity.
 */
function membership_entity_save(&$membership) {
  return entity_get_controller('membership_entity')
    ->save($membership);
}

/**
 * Implements hook_membership_entity_insert().
 */
function membership_entity_membership_entity_insert($membership) {
  membership_entity_membership_entity_update($membership);
}

/**
 * Implements hook_membership_entity_update().
 */
function membership_entity_membership_entity_update($membership) {
  // Update the primary member's role to match $membership->status.
  membership_entity_update_user_role($membership);
}

/**
 * Delete a membership entity.
 */
function membership_entity_delete($mid) {
  membership_entity_delete_multiple(array($mid));
}

/**
 * Delete multiple membership entities.
 */
function membership_entity_delete_multiple($mids) {
  entity_get_controller('membership_entity')
    ->delete_multiple($mids);
}

/**
 * Retrieve a list of membership status options.
 */
function membership_entity_get_status_list() {
  return array(
    MEMBERSHIP_ENTITY_EXPIRED => t('Expired'),
    MEMBERSHIP_ENTITY_ACTIVE => t('Active'),
    MEMBERSHIP_ENTITY_CANCELLED => t('Cancelled'),
    MEMBERSHIP_ENTITY_PENDING => t('Pending'),
  );
}

/**
 *  Defines a membership entity.
 */
class MembershipEntity extends Entity {
  /**
   * The primary identifier for a membership.
   */
  public $mid;

  /**
   * A user enterable unique member id.
   */
  public $member_id;

  /**
   * The type (bundle) of membership.
   */
  public $type;

  /**
   * The primary member.
   */
  public $uid;

  /**
   * Integer code indicating the membership status.
   */
  public $status;

  /**
   * The Unix timestamp when the membership was created.
   */
  public $created;

  /**
   * The Unix timestamp when the membership was most recently saved.
   */
  public $changed;

  /**
   * Default constructor.
   */
  public function __construct($values = array()) {
    parent::__construct($values, 'membership_entity');
  }
}

/**
 * Create a new membership entity with default values.
 */
function membership_entity_create() {
  $user = $GLOBALS['user'];

  return new MembershipEntity(array(
    'entity_type' => 'membership_entity',
    'mid' => 0,
    'uid' => $user->uid,
    'type' => 'membership',
    'created' => REQUEST_TIME,
    'status' => MEMBERSHIP_ENTITY_ACTIVE,
    'terms' => array(),
  ));
}
