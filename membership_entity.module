<?php

/**
 * @file
 * Allows users to create membership entities.
 */

/**
 * Membership status codes.
 */
define('MEMBERSHIP_ENTITY_EXPIRED', 0);
define('MEMBERSHIP_ENTITY_ACTIVE', 1);
define('MEMBERSHIP_ENTITY_CANCELLED', 2);
define('MEMBERSHIP_ENTITY_PENDING', 3);

/**
 * Retrieve a list of membership status options.
 */
function membership_entity_get_status_list() {
  return array(
    MEMBERSHIP_ENTITY_EXPIRED => t('Expired'),
    MEMBERSHIP_ENTITY_ACTIVE => t('Active'),
    MEMBERSHIP_ENTITY_CANCELLED => t('Cancelled'),
    MEMBERSHIP_ENTITY_PENDING => t('Pending'),
  );
}

/**
 * Implements hook_help().
 */
function membership_entity_help($path, $arg) {
  switch ($path) {
    // @TODO add help documentation
  }
}

/**
 * Implements hook_views_api().
 */
function membership_entity_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'membership_entity') . '/views',
  );
}

/**
 * Implements hook_entity_info().
 */
function membership_entity_entity_info() {
  $info['membership_entity'] = array(
    'label' => t('Membership'),
    'plural label' => t('Memberships'),
    'entity class' => 'MembershipEntity',
    'controller class' => 'MembershipEntityController',
    'base table' => 'membership_entity',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'mid' ,
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Membership'),
        'custom settings' =>  FALSE,
      ),
      'account' => array(
        'label' => t('User account page'),
        'custom settings' =>  FALSE,
      ),
    ),
  );

  if (module_exists('membership_entity_type')) {
    // Add user defined bundles.
    foreach (membership_entity_type_get_types() as $bundle => $type) {
      $info['membership_entity']['bundles'][$bundle] = array(
        'label' => $type->label,
        'admin' => array(
          'path' => 'admin/structure/memberships/manage/%membership_entity_type',
          'real path' => 'admin/structure/memberships/manage/' . $type->type,
          'bundle argument' => 4,
          'access arguments' => array('administer membership types'),
        ),
      );
    }
  }
  else {
    // Add a default bundle.
    $info['membership_entity']['bundles']['membership'] = array(
      'label' => t('Membership'),
      'admin' => array(
        'path' => 'admin/structure/memberships',
        'access arguments' => array('administer memberships'),
      ),
    );
  }

  return $info;
}

/**
 * Implements hook_permission().
 */
function membership_entity_permission() {
  $permissions = array(
    'administer memberships' => array(
      'title' => t('Administer memberships'),
      'restrict access' => TRUE,
    ),
    'access join page' => array(
      'title' => t('Join @site', array('@site' => variable_get('site_name', ''))),
    ),
  );

  if (!module_exists('membership_entity_type')) {
    $permissions['membership view any membership'] = array(
      'title' => t('View any membership.'),
    );
    $permissions['membership view own membership'] = array(
      'title' => t('View own membership.'),
    );
    $permissions['membership edit any membership'] = array(
      'title' => t('Edit any membership.'),
    );
    $permissions['membership edit own membership'] = array(
      'title' => t('Edit own membership.'),
    );
    $permissions['membership delete any membership'] = array(
      'title' => t('Delete any membership.'),
      'restrict access' => TRUE,
    );
    $permissions['membership delete own membership'] = array(
      'title' => t('Delete own membership.'),
      'restrict access' => TRUE,
    );
  }

  return $permissions;
}

/**
 * Membership entity access callback.
 *
 * @param $op
 *  The membership operations. Valid values are 'join', 'renew', 'manage',
 *  'view', 'edit', or 'delete'.
 * @param $membership
 *  The membership object.
 * @param $account
 *  The user account to check access. Defaults to logged in user.
 * @return boolean
 *  TRUE if the user has access for the given operation.
 */
function membership_entity_access($op, $membership = NULL, $account = NULL) {
  if (user_access('administer memberships', $account)) {
    return TRUE;
  }

  // Allow modules to grant or deny access.
  $access = module_invoke_all('membership_entity_access', $op, $membership, $account);

  // Grant access if a module grants access and no one denies access.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_membership_entity_access().
 */
function membership_entity_membership_entity_access($op, $membership = NULL, $account = NULL) {
  $user = isset($account) ? $account : $GLOBALS['user'];
  $bundle_settings = membership_entity_get_bundle_settings();

  // Join page access.
  if ($op == 'join') {
    // See if a membership exists for this user.
    $efq = new EntityFieldQuery();
    $results = $efq->entityCondition('entity_type', 'membership_entity')
      ->propertyCondition('uid', $user->uid)
      ->propertyCondition('uid', 0, '<>')
      ->range(0, 1)
      ->execute();
    if (empty($results['membership_entity']) && user_access('access join page')) {
      return TRUE;
    }
  }

  if (isset($membership) && $type_name = $membership->type) {
    if (user_access("$type_name $op any membership", $user)) {
      return TRUE;
    }

    if (user_access("$type_name $op own membership", $user) && $membership->uid == $user->uid) {
      return TRUE;
    }

    // Secondary member access.
    $results = db_select('membership_entity_secondary_member')
      ->fields('membership_entity_secondary_member', array('mid'))
      ->condition('uid', $user->uid)
      ->execute()
      ->fetchAllAssoc('mid');
    if (!empty($results) && in_array($membership->mid, array_keys($results))) {
      // Can secondary members edit the membership?
      if ($op == 'edit' && $bundle_settings['all_edit'] && user_access("$type edit own membership", $user)) {
        return TRUE;
      }

      // Can secondary members view the membership?
      if ($op == 'view' && user_access("$type view own membership", $user)) {
        return TRUE;
      }
    }
  }
}

/**
 * Access callback for the modal register form.
 *
 * @see  user_register_access().
 */
function membership_entity_modal_register_access() {
  return user_access('administer users') || variable_get('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);
}

/**
 * Implements hook_menu().
 */
function membership_entity_menu() {
  if (!module_exists('membership_entity_type')) {
    $items['admin/structure/memberships'] = array(
      'title' => 'Memberships',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_entity_settings_form'),
      'access arguments' => array('administer memberships'),
      'file' => 'membership_entity.pages.inc',
    );

    $items['admin/structure/memberships/settings'] = array(
      'title' => 'Settings',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10,
    );
  }

  $items['admin/memberships'] = array(
    'title' => 'Memberships',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_admin_memberships'),
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.pages.inc',
  );

  $items['admin/memberships/add'] = array(
    'title' => 'Add a membership',
    'page callback' => 'membership_entity_add_page',
    'access arguments' => array('administer memberships'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'membership_entity.pages.inc',
  );

  $items['user/join'] = array(
    'title' => 'Join',
    'page callback' => 'membership_entity_join',
    'access callback' => 'membership_entity_access',
    'access arguments' => array('join'),
    'type' => MENU_LOCAL_TASK,
    'weight' => -9999, // Me first!
    'file' => 'membership_entity.pages.inc',
  );

  $items['membership/%membership_entity'] = array(
    'title callback' => 'membership_entity_page_title',
    'title arguments' => array(1),
    'page callback' => 'membership_entity_view',
    'page arguments' => array(1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('view', 1),
  );
  $items['membership/%membership_entity/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['membership/%membership_entity/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'membership_entity_edit',
    'page arguments' => array(1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('edit', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership/%membership_entity/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_delete_confirm', 1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('delete', 1),
    'weight' => 2,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'membership_entity.pages.inc',
  );

  // Modal register form.
  $items['membership_entity/%ctools_js/register/%'] = array(
    'title' => 'Register',
    'page callback' => 'membership_entity_modal_register',
    'page arguments' => array(1, 3),
    'access callback' => 'membership_entity_modal_register_access',
    'file' => 'membership_entity.pages.inc',
    'type' => MENU_CALLBACK,
  );

  // Add support for devel generate.
  if (module_exists('devel_generate')) {
    $items['admin/config/development/generate/membership-entity'] = array(
      'title' => 'Generate memberships',
      'description' => 'Generate a given number of memberships. Optionally delete current memberships.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('membership_entity_devel_generate_memberships_form'),
      'access arguments' => array('administer memberships'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'membership_entity.devel.inc',
    );
  }

  return $items;
}

/**
 * Title callback for a membership page.
 */
function membership_entity_page_title($membership) {
  $statuses = membership_entity_get_status_list();
  return t('Membership @member_id@status', array(
    '@member_id' => $membership->member_id,
    '@status' => ($membership->status != MEMBERSHIP_ENTITY_ACTIVE) ? ' (' . $statuses[$membership->status] . ')' : '',
  ));
}

/**
 * Implements hook_admin_paths().
 */
function membership_entity_admin_paths() {
  return array(
    // @TODO add admin paths.
  );
}

/**
 * Implements hook_theme().
 */
function membership_entity_theme() {
  $theme_hooks = array(
    'membership_entity' => array(
      'render element' => 'membership',
      'template' => 'membership-entity',
    ),
  );

  foreach ($theme_hooks as $hook => $info) {
    $theme_hooks[$hook]['file'] = 'membership_entity.theme.inc';
  }

  return $theme_hooks;
}

/**
 * Implements hook_user_view().
 *
 * Add membership data to the user page.
 */
function membership_entity_user_view($account, $view_mode, $langcode) {
  if ($memberships = membership_entity_load_by_user($account)) {
    foreach ($memberships as $mid => $membership) {
      $account->content['memberships'][$mid] = membership_entity_view($membership, 'account', $langcode);
    }
  }
}

/**
 * Implements hook_membership_entity_operations().
 */
function membership_entity_membership_entity_operations() {
  return array(
    'delete' => array(
      'label' => t('Delete selected memberships'),
      'callback' => NULL,
    ),
  );
}

/**
 * Menu callback: Display a membership.
 */
function membership_entity_view($membership, $view_mode = 'full', $langcode = NULL) {
  if (!isset($langcode)) {
    $langcode = $GLOBALS['language']->language;
  }

  $entity_type = 'membership_entity';
  $membership->content = array();

  // Allow modules to change the view mode.
  $context = array(
    'entity_type' => $entity_type,
    'entity' => $membership,
    'langcode' => $langcode,
  );
  drupal_alter('entity_view_mode', $view_mode, $context);

  // Add the primary membership on full membership page.
  if ($view_mode == 'full') {
    $account = user_load($membership->uid);
    $membership->content['uid'] = array(
      'label' => array(
        '#theme_wrappers' => array('container'),
        '#attributes' => array('class' => array('membership-entity-label')),
        '#markup' => t('Primary Member:') . '&nbsp',
      ),
      'link' => array(
        '#type' => 'link',
        '#title' => format_username($account),
        '#href' => 'user/' . $account->uid,
        '#options' => array(
          'attributes' => array('class' => array('membership-entity-primary-member')),
          'html' => FALSE,
        ),
      ),
    );
  }

  if (!empty($membership->secondary_members)) {
    $links = array();
    foreach ($membership->secondary_members as $delta => $uid) {
      $links[$delta] = array(
        'title' => format_username(user_load($uid)),
        'href' => 'user/' . $uid,
      );
    }

    $membership->content['secondary_members'] = array(
      'label' => array(
        '#theme_wrappers' => array('container'),
        '#attributes' => array('class' => array('membership-entity-label')),
        '#markup' => format_plural(count($links), 'Secondary Member:', 'Secondary Members:') . '&nbsp',
      ),
    );
    if (count($links) == 1) {
      $link = reset($links);
      $membership->content['secondary_members']['links'] = array(
        '#type' => 'link',
        '#title' => $link['title'],
        '#href' => $link['href'],
        '#options' => array(
          'attributes' => array('class' => array('membership-entity-secondary-members')),
          'html' => FALSE,
        ),
      );
    }
    else {
      $membership->content['secondary_members']['links'] = array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array('class' => array('membership-entity-secondary-members')),
      );
    }
  }

  // Build custom field content.
  field_attach_prepare_view('membership_entity', array($membership->mid => $membership), $view_mode, $langcode);
  entity_prepare_view('membership_entity', array($membership->mid => $membership), $langcode);
  $membership->content += field_attach_view('membership_entity', $membership, $view_mode, $langcode);

  $membership->content['links'] = array(
    '#theme' => 'links__membership_entity',
    '#pre_render' => array('drupal_pre_render_links'),
    '#attributes' => array('class' => array('links', 'inline')),
    '#weight' => 99,
  );
  if ($view_mode == 'account') {
    // Display the membership in a fieldset on user account pages.
    $membership->content += array(
      '#theme_wrappers' => array('fieldset'),
      '#title' => t('Membership @member_id', array(
        '@member_id' => $membership->member_id,
      )),
    );

    $links = array();

    if (membership_entity_access('view', $membership)) {
      $links['view'] = array(
        'title' => t('View full membership'),
        'href' => 'membership/' . $membership->mid,
        'attributes' => array(
          'title' => t('View membership @member_id.', array('@member_id' => $membership->member_id)),
        ),
        'html' => FALSE,
      );
    }

    if (membership_entity_access('edit', $membership)) {
      $links['edit'] = array(
        'title' => t('Edit membership'),
        'href' => 'membership/' . $membership->mid . '/edit',
        'attributes' => array(
          'title' => t('Edit membership @member_id.', array('@member_id' => $membership->member_id)),
        ),
        'html' => FALSE,
      );
    }

    $membership->content['links']['membership_entity'] = array(
      '#theme' => 'links__membership_entity__membership_entity',
      '#links' => $links,
      '#attributes' => array('class' => array('links', 'inline')),
    );
  }

  module_invoke_all('membership_entity_view', $membership, $view_mode, $langcode);
  module_invoke_all('entity_view', $membership, 'membership_entity', $view_mode, $langcode);

  $membership->content += array('#view_mode' => $view_mode);

  $build = $membership->content;
  unset($membership->content);

  $build += array(
    '#theme' => 'membership_entity',
    '#membership_entity' => $membership,
    '#view_mode' => $view_mode,
    '#language' => $langcode,
  );

  // Invoke view and alter hooks.
  $type = 'membership_entity';
  drupal_alter(array('entity_membership_entity_view', 'entity_view'), $build, $type);
  return $build;
}

/**
 * Implements hook_field_extra_fields().
 */
function membership_entity_field_extra_fields() {
  $fields['membership_entity']['membership'] = array(
    'form' => array(
      'membership' => array(
        'label' => t('Membership Information'),
        'description' => t('Primary and secondary members, status, term length, etc.'),
        'weight' => 0,
      ),
    ),
  );
  return $fields;
}

/**
 * Entity uri callback.
 */
function membership_entity_uri($membership) {
  return array(
    'path' => 'membership/' . $membership->mid,
  );
}

/**
 * Load bundle settings for a membership.
 *
 * @param $bundle
 *  The membership bundle to load settings or NULL to load defaults.
 */
function membership_entity_get_bundle_settings($bundle = NULL) {
  if (module_exists('membership_entity_type')) {
    $type = membership_entity_type_load($bundle);
    $data = $type->data;
  }
  else {
    $data = variable_get('membership_entity_settings', array());
  }

  if (empty($data)) {
    drupal_set_message(t('The membership entity module is missing configuration settings. Please visit the <a href="!url">settings page</a> to configure the module.', array(
      '!url' => url('admin/structure/memberships', array('query' => drupal_get_destination())),
    )), 'error');
    return FALSE;
  }
  return $data;
}

/**
 * Return the next available member id.
 */
function membership_entity_next_member_id($type) {
  $data = membership_entity_get_bundle_settings($type);
  return _membership_entity_member_id_get_instance($data['member_id_format'], $data['member_id_settings'])
    ->next();
}

/**
 * Implements hook_ctools_plugin_type().
 */
function membership_entity_ctools_plugin_type() {
  return array(
    'member_id' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'hook' => 'membership_entity_member_id_info',
      'classes' => array('class'),
      'process' => 'membership_entity_member_id_plugin_process',
    ),
  );
}

/**
 * CTools plugin process callback.
 */
function membership_entity_member_id_plugin_process(&$plugin, $info) {
  $plugin += array(
    'description' => '',
  );
}

/**
 * Get metadata for member id plugins.
 *
 * @param $id (optional)
 *  Return metadata on a specific member_id plugin.
 */
function membership_entity_get_member_id($id = NULL) {
  ctools_include('plugins');
  return ctools_get_plugins('membership_entity', 'member_id', $id);
}

/**
 * Helper to retrieve a member id plugin instance.
 */
function _membership_entity_member_id_get_instance($id, $settings = array()) {
  $instances = &drupal_static(__FUNCTION__);

  if (!isset($instances[$id])) {
    $plugin = membership_entity_get_member_id($id);
    $class = ctools_plugin_get_class($plugin, 'class');
    $class = class_exists($class) ? $class : 'MembershipEntityMemberIdBroken';
    $instances[$id] = new $class($settings);

    // Check that plugin class has implemented the
    // MembershipEntityMemberId interface.
    if (!in_array('MembershipEntityMemberId', class_implements($instances[$id]))) {
      $instances[$id] = new MembershipEntityMemberIdBroken($settings);
    }
  }

  return $instances[$id];
}

/**
 * Implements hook_membership_entity_member_id_info().
 */
function membership_entity_membership_entity_member_id_info() {
  return array(
    'membership_entity_numeric_member_id' => array(
      'title' => t('Numeric ID'),
      'description' => t('An incrementing numeric member id.'),
      'class' => 'MembershipEntityNumericMemberId',
      'path' => drupal_get_path('module', 'membership_entity') . '/plugins/member_id',
    ),
  );
}

/**
 * Implements hook_form_FORM_ID_alter() for the user_login() form.
 */
function membership_entity_form_user_login_alter(&$form, &$form_state, $form_id) {
  if ($form['#action'] == '/user/join') {
    $form['#submit'][] = 'membership_entity_join_login_submit';
  }
}

/**
 * Submit handler for the login form on the join page.
 */
function membership_entity_join_login_submit($form, &$form_state) {
  // Redirect to the join page.
  $form_state['redirect'] = 'user/join';
}

/**
 * Implements hook_user_cancel().
 */
function membership_entity_user_cancel($edit, $account, $method) {
  switch ($method) {
    case 'user_cancel_block_unpublish':
      $memberships = membership_entity_load_by_user($account->uid);
      foreach ($memberships as $mid => $membership) {
        $membership->status = MEMBERSHIP_ENTITY_CANCELLED;
        membership_entity_save($membership);
      }
      break;

    case 'user_cancel_reassign':
      membership_entity_user_delete($account);
      break;
  }
}

/**
 * Implements hook_user_delete().
 */
function membership_entity_user_delete($account) {
  // Delete primary memberships.
  $memberships = membership_entity_load_by_user($account->uid);
  membership_entity_delete_multiple(array_keys($memberships));

  // Delete secondary memberships.
  db_delete('membership_entity_secondary_member')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Creates a Drupal Ajax attribute command.
 *
 * The attribute command uses jQuery.attr() to apply an arbitrary attribute
 * to each element matched by the given selector. Why this isn't in core, I
 * don't know!
 *
 * @param $selector
 *  A jQuery selector string.
 * @param $attribute
 *  The HTML attribute to add or change.
 * @param $value
 *  The new value of the attribute.
 */
function membership_entity_ajax_command_attr($selector, $attribute, $value) {
  return array(
    'command' => 'membership_entity_attr',
    'selector' => $selector,
    'attribute' => $attribute,
    'value' => $value,
  );
}

/**
 * Implements hook_element_info().
 */
function membership_entity_element_info() {
  return array(
    'membership_entity_member_select' => array(
      '#input' => TRUE,
      '#title' => '',
      '#description' => '',
      '#default_value' => '',
      '#disabled' => FALSE,
      '#cardinality' => 1,
      '#required' => FALSE,
      '#autocomplete_path' => 'user/autocomplete',
      '#process' => array('membership_entity_member_select_process'),
      '#element_validate' => array('membership_entity_member_select_validate'),
    ),
  );
}

/**
 * Value callback for the member select field.
 */
function form_type_membership_entity_member_select_value($element, $input, &$form_state) {
  if ($input === FALSE && !empty($element['#default_value'])) {
    $defaults = is_array($element['#default_value']) ? $element['#default_value'] : array($element['#default_value']);
    foreach ($defaults as $delta => $uid) {
      // Expand the raw uid into username.
      $value[$delta] = array(
        'value' => check_plain(db_select('users')->fields('users', array('name'))->condition('uid', $uid)->range(0, 1)->execute()->fetchField()),
        '_weight' => $delta,
      );
    }
    return $value;
  }
  return $input;
}

/**
 * Process callback for the member select element.
 */
function membership_entity_member_select_process($element, &$form_state, $complete_form) {
  // Include the CTools tools and javascript that we need.
  ctools_include('ajax');
  ctools_include('modal');
  ctools_modal_add_js();
  drupal_add_js(drupal_get_path('module', 'membership_entity') . '/js/membership-entity-ajax.js');

  $multiple = ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED);
  $wrapper_id = drupal_html_id($element['#id'] . '-add-more-wrapper');

  if (empty($form_state['items_count'][$element['#name']])) {
    $form_state['items_count'][$element['#name']] = count($element['#value']);
  }

  if ($element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
    $max = $form_state['items_count'][$element['#name']];
  }
  else {
    $max = $element['#cardinality'] - 1;
  }

  if ($multiple) {
    $field_element = array(
      '#theme' => 'field_multiple_value_form',
      '#field_name' => $element['#name'],
      '#prefix' => '<div id="' . $wrapper_id . '">',
      '#suffix' => '</div>',
      '#max_delta' => $max,
      '#tree' => TRUE,
    );
  }
  else {
    // Single value is displayed in a fieldset.
    $field_element = array(
      '#prefix' => '<label>' . $element['#title'] . '</label>',
      '#tree' => TRUE,
    );
  }

  $field_element += $element;
  for ($delta = 0; $delta <= $max; $delta++) {
    $id = drupal_html_id($element['#id'] . '_' . $delta);
    $item['value'] = array(
      '#delta' => $delta,
      '#weight' => $delta,
      '#type' => 'textfield',
      '#title' => t('Select an existing account'),
      '#disabled' => $element['#disabled'],
      '#description' => filter_xss($element['#description']),
      '#autocomplete_path' => $element['#autocomplete_path'],
      '#default_value' => is_array($element['#default_value']) ? (isset($element['#default_value'][$delta]) ? $element['#default_value'][$delta] : '') : $element['#default_value'],
      '#value_callback' => 'membership_entity_uid_value',
      // Only the first item should be required.
      '#required' => $delta == 0 && $element['#required'],
      '#id' => $id,
    );

    // Add the "Create a new account" button.
    if (!$element['#disabled'] && membership_entity_modal_register_access()) {
      $item['value']['#field_suffix'] = ' or ' . ctools_modal_text_button(t('Create a new account'), 'membership_entity/nojs/register/' . $id, t('Create a new account.'), 'button');
    }

    if ($element['#cardinality'] > 1 || $element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED) {
      // We name the element '_weight' to avoid clashing with elements
      // defined by widget.
      $item['_weight'] = array(
        '#type' => 'weight',
        '#title' => t('Weight for row @number', array('@number' => $delta + 1)),
        '#title_display' => 'invisible',
        '#delta' => $max,
        '#default_value' => isset($items[$delta]['_weight']) ? $items[$delta]['_weight'] : $delta,
        '#weight' => 100,
      );
    }

    $field_element[$delta] = $item;
  }

  // Add the "add more" button.
  if ($element['#cardinality'] == FIELD_CARDINALITY_UNLIMITED && empty($form_state['programmed'])) {
    $field_element['add_more'] = array(
      '#type' => 'submit',
      '#name' => strtr($element['#id'],'-', '_') . '_add_more',
      '#value' => t('Add another'),
      '#field_name' => $element['#name'],
      '#attributes' => array('class' => array('field-add-more-submit')),
      '#limit_validation_errors' => array(),
      '#submit' => array('membership_entity_member_select_add_more_submit'),
      '#ajax' => array(
        'callback' => 'membership_entity_member_select_add_more_js',
        'wrapper' => $wrapper_id,
        'effect' => 'fade',
      ),
    );
  }

  return $field_element;
}

/**
 * Submit handler for the "Add another" button of a member field.
 */
function membership_entity_member_select_add_more_submit($form, &$form_state) {
  $button = $form_state['triggering_element'];
  $form_state['items_count'][$button['#field_name']]++;
  $form_state['rebuild'] = TRUE;
}

/**
 * Ajax callback to add another member select widget.
 *
 * @see membership_entity_member_select_add_more_submit().
 */
function membership_entity_member_select_add_more_js($form, $form_state) {
  $button = $form_state['triggering_element'];

  // Go one level up in the form, to the widgets container.
  $element = drupal_array_get_nested_value($form, array_slice($button['#array_parents'], 0, -1));

  if ($element['#cardinality'] != FIELD_CARDINALITY_UNLIMITED) {
    return;
  }

  // Add a DIV around the delta receiving the Ajax effect.
  $delta = $element['#max_delta'];
  $element[$delta]['#prefix'] = '<div class="ajax-new-content">' . (isset($element[$delta]['#prefix']) ? $element[$delta]['#prefix'] : '');
  $element[$delta]['#suffix'] = (isset($element[$delta]['#suffix']) ? $element[$delta]['#suffix'] : '') . '</div>';

  return $element;
}

/**
 * Element validate callback for the membership_entity_member_select element.
 */
function membership_entity_member_select_validate($element, &$form_state) {
  $values = array();
  foreach ($element['#value'] as $delta => $value) {
    if (!is_numeric($delta)) {
      continue;
    }

    if (!empty($value['value'])) {
      $name = $value['value'];
      if ($uid = db_select('users')->fields('users', array('uid'))->condition('name', $name)->execute()->fetchField()) {
        // Save the value as a uid instead of username.
        $values[$delta] = $uid;
      }
      else {
        form_error($element[$delta], t('Could not find an account with the username %name', array('%name' => $name)));
      }
    }
  }

  if ($element['#cardinality'] == 1) {
    $values = reset($values);
  }
  form_set_value($element, $values, $form_state);
  return $element;
}

/**
 * Value callback to display the username of a given user.
 */
function membership_entity_uid_value($element, $input = FALSE, $form_state) {
  if ($input === FALSE && !empty($element['#default_value'])) {
    // Expand the raw uid into username.
    $uid = $element['#default_value'];
    $result = db_select('users')->fields('users', array('name'))->condition('uid', $uid)->range(0, 1)->execute()->fetchField();
    return check_plain($result);
  }
}

/**
 * Create a new membership entity with default values.
 */
function membership_entity_create($values = array()) {
  return entity_create('membership_entity', $values);
}

/**
 * Load a single membership object.
 */
function membership_entity_load($mid = NULL, $reset = FALSE) {
  $memberships = membership_entity_load_multiple(array($mid), array(), $reset);
  return is_array($memberships) ? reset($memberships) : FALSE;
}

/**
 * Load all memberships for a given user.
 */
function membership_entity_load_by_user($account, $reset = FALSE) {
  $controller = entity_get_controller('membership_entity');
  if ($reset) {
    $controller->resetCache();
  }
  return $controller->load_by_user($account);
}

/**
 * Loads multiple membership objects.
 */
function membership_entity_load_multiple($mids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('membership_entity', $mids, $conditions, $reset);
}

/**
 * Save a membership entity.
 */
function membership_entity_save(&$membership) {
  return entity_save('membership_entity', $membership);
}

/**
 * Delete a membership entity.
 */
function membership_entity_delete($mid) {
  membership_entity_delete_multiple(array($mid));
}

/**
 * Delete multiple membership entities.
 */
function membership_entity_delete_multiple($mids) {
  entity_delete_multiple('membership_entity', $mids);
}

/**
 * Add/Remove roles managed by the membership.
 */
function _membership_entity_update_roles($roles) {
  $accounts = user_load_multiple(array_keys($roles));

  foreach ($accounts as $uid => $account) {
    $rid = $roles[$uid]['rid'];
    if ($roles[$uid]['op'] == 'add' && !isset($account->roles[$rid])) {
      $account->roles[$rid]= $rid;
      user_save($account);
    }
    elseif (isset($account->roles[$rid])) {
      unset($account->roles[$rid]);
      user_save($account);
    }
  }
}
