<?php

/**
 * @file
 * Allows users to create membership entities.
 */

/**
 * Membership is disabled.
 */
define('MEMBERSHIP_ENTITY_EXPIRED', 0);

/**
 * Membership is active.
 */
define('MEMBERSHIP_ENTITY_ACTIVE', 1);

/**
 * Membership was cancelled before it expires.
 */
define('MEMBERSHIP_ENTITY_CANCELLED', 2);

/**
 * The membership is pending admin approval.
 */
define('MEMBERSHIP_ENTITY_PENDING', 3);

/**
 * Implements hook_help().
 */
function membership_entity_help($path, $arg) {
  switch ($path) {
    // @TODO add help documentation
  }
}

/**
 * Implements hook_permission().
 */
function membership_entity_permission() {
  $perms = array(
    'access membership join page' => array(
      'title' => t('Access the membership join page'),
    ),
    'administer membership types' => array(
      'title' => t('Administer membership types'),
      'restrict access' => TRUE,
    ),
    'administer memberships' => array(
      'title' => t('Administer memberships'),
      'restrict access' => TRUE,
    ),
  );
  foreach (membership_entity_get_types() as $type_name => $type) {
    $perms += array(
      $type_name . ' manage any membership' => array(
        'title' => t('Manage any %type membership', array('%type' => $type->name)),
        'restrict access' => TRUE,
      ),
      $type_name . ' manage own membership' => array(
        'title' => t('Manage own %type membership', array('%type' => $type->name)),
        'description' => t('Add/remove secondary members.'),
      ),
      $type_name . ' view any membership' => array(
        'title' => t('View any %type membership', array('%type' => $type->name)),
      ),
      $type_name . ' view own membership' => array(
        'title' => t('View own %type membershp', array('%type' => $type->name)),
      ),
      $type_name . ' edit any membership' => array(
        'title' => t('Edit any %type membership', array('%type' => $type->name)),
      ),
      $type_name . ' edit own membership' => array(
        'title' => t('Edit own %type membership', array('%type' => $type->name)),
      ),
      $type_name . ' delete any membership' => array(
        'title' => t('Delete any %type membership', array('%type' => $type->name)),
      ),
      $type_name . ' delete own membership' => array(
        'title' => t('Delete own %type membership', array('%type' => $type->name)),
      ),
    );
  }
  return $perms;
}

/**
 * Membership entity access callback.
 *
 * @param $op
 *  The membership operations. Valid values are 'manage', 'view', 'create',
 *  'edit', or 'delete'.
 * @param $membership
 *  The membership object.
 * @param $account
 *  The user account to check access. Defaults to logged in user.
 * @return boolean
 *  TRUE if the user has access for the given operation.
 */
function membership_entity_access($op, $membership = NULL, $account = NULL) {
  if (user_access('administer memberships', $account)) {
    return TRUE;
  }

  // Allow modules to grant or deny access.
  $access = module_invoke_all('membership_entity_access', $op, $membership, $account);

  // Grant access if a module grants access and no one denies access.
  if (in_array(FALSE, $access, TRUE)) {
    return FALSE;
  }
  elseif (in_array(TRUE, $access, TRUE)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_membership_entity_access().
 */
function membership_entity_membership_entity_access($op, $membership = NULL, $account = NULL) {
  $user = isset($account) ? $account : $GLOBALS['user'];
  if (isset($membership) && $type = $membership->type) {
    if (user_access("$type $op any membership", $user)) {
      return TRUE;
    }

    if (user_access("$type $op own membership", $user) && $membership->uid == $user->uid) {
      return TRUE;
    }

    $efq = new EntityFieldQuery();
    $result = $efq->entityCondition('entity_type', 'membership_entity')
      ->entityCondition('bundle', $type)
      ->fieldCondition($type . '_members', 'target_id', $user->uid)
      ->execute();
    if (!empty($result['membership_entity'])
      && in_array($membership->mid, array_keys($result['membership_entity']))) {

      // Can secondary members edit the membership?
      if ($op == 'edit' && variable_get('membership_entity_all_edit_' . $type, FALSE)
        && user_access("$type edit own membership", $user)) {
        return TRUE;
      }

      // Can secondary members view the membership?
      if ($op == 'view' && user_access("$type view own membership", $user)) {
        return TRUE;
      }
    }
  }
}

/**
 * Implements hook_menu().
 */
function membership_entity_menu() {
  // Membership entity type pages.
  $items['admin/structure/membership-types'] = array(
    'title' => 'Membership types',
    'description' => 'Manage membership types.',
    'page callback' => 'membership_entity_types',
    'access arguments' => array('administer membership types'),
    'file' => 'membership_entity.types.inc',
  );
  $items['admin/structure/membership-types/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/membership-types/add'] = array(
    'title' => 'Add a membership type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_type_form'),
    'access arguments' => array('administer membership types'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'membership_entity.types.inc',
  );
  $items['admin/structure/membership-types/manage/%membership_entity_type'] = array(
    'title' => 'Edit membership type',
    'title callback' => 'membership_entity_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_type_form', 4),
    'access arguments' => array('administer membership types'),
    'file' => 'membership_entity.types.inc',
  );
  $items['admin/structure/membership-types/manage/%membership_entity_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/structure/membership-types/manage/%membership_entity_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('membership_entity_type_confirm_delete', 4),
    'access arguments' => array('administer membership types'),
    'file' => 'membership_entity.types.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 99,
  );
  // Membership entity pages.
  $items['admin/memberships'] = array(
    'title' => 'Memberships',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_admin_memberships'),
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.pages.inc',
  );
  $items['admin/memberships/add'] = array(
    'title' => 'Add a membership',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'membership_entity_add_page',
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.pages.inc',
  );
  foreach (membership_entity_get_types(TRUE) as $type) {
    $type_url_str = str_replace('_', '-', $type->type);
    $items['admin/memberships/add/' . $type_url_str] = array(
      'title' => $type->name,
      'title callback' => 'check_plain',
      'page callback' => 'membership_entity_add',
      'page arguments' => array($type->type),
      'access arguments' => array('administer memberships'),
      'description' => $type->description,
      'file' => 'membership_entity.pages.inc',
    );
  }
  $items['membership/%membership_entity'] = array(
    'title callback' => 'membership_entity_page_title',
    'title arguments' => array(1),
    'page callback' => 'membership_entity_view',
    'page arguments' => array(1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('view', 1),
  );
  $items['membership/%membership_entity/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['membership/%membership_entity/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'membership_entity_edit',
    'page arguments' => array(1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('edit', 1),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership/%membership_entity/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_delete_confirm', 1),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('delete', 1),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
    'context' => MENU_CONTEXT_INLINE,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership-entity/%membership_entity/user/autocomplete/%'] = array(
    'page callback' => 'membership_entity_user_autocomplete',
    'page arguments' => array(4),
    'access callback' => 'membership_entity_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_CALLBACK,
    'file' => 'membership_entity.pages.inc',
  );
  $items['membership-entity/join'] = array(
    'title' => 'Join @site',
    'title arguments' => array('@site' => variable_get('site_name', '')),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_join'),
    'access arguments' => array('access membership join page'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'membership_entity.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function membership_entity_admin_paths() {
  return array(
    // @TODO add admin paths.
  );
}

/**
 * Implements hook_theme().
 */
function membership_entity_theme() {
  return array(
    'membership_entity_type_available_term_lengths' => array(
      'render element' => 'element',
      'file' => 'membership_entity.types.inc',
    ),
    // @TODO: Theme a membership
  );
}

/**
 * Implements hook_user_view().
 *
 * Add membership data to the user page.
 */
function membership_entity_user_view($account, $view_mode, $langcode) {
  foreach (membership_entity_get_types() as $type_name => $type) {
    if ($memberships = membership_entity_load_by_user($account, $type_name)) {
      foreach ($memberships as $mid => $membership) {
        $account->content['memberships'][$mid] = membership_entity_view($membership, 'account');
      }
    }
  }
}

/**
 * Menu argument loader: loads a membership type by machine name.
 *
 * @param $name
 *   The machine name name of a membership type to load, '_' is replaced with '-'.
 *
 * @return
 *   A membership type object or FALSE if $name does not exist.
 */
function membership_entity_type_load($name) {
  $types = membership_entity_get_types();
  $machine_name = str_replace('-', '_', $name);
  return isset($types[$machine_name]) ? $types[$machine_name] : FALSE;
}

/**
 * Returns a list of membership types.
 *
 * @param $rebuild
 *  TRUE to rebuild the membership types cache.
 */
function membership_entity_get_types($rebuild = FALSE) {
  $cid = 'membership_entity_types';

  if (!$rebuild) {
    // Check the static cache.
    $types = &drupal_static(__FUNCTION__);
    if (isset($types)) {
      return $types;
    }

    // Check the database cache.
    if ($cache = cache_get($cid)) {
      $types = $cache->data;
      return $types;
    }
  }

  $types = array();

  $results = db_select('membership_entity_type', 'met')
    ->fields('met')
    ->orderBy('met.type', 'ASC')
    ->execute();

  foreach ($results as $result) {
    $types[$result->type] = $result;
  }

  cache_set($cid, $types);
  return $types;
}

/**
 * Returns a list of membership type names.
 */
function membership_entity_get_type_names() {
  $types = membership_entity_get_types();
  $names = array();
  foreach ($types as $type) {
    $names[$type->type] = $type->name;
  }
  return $names;
}

/**
 * Returns the human readable name of a membership object type.
 *
 * @param $membership
 *  The membership object to get the type name.
 */
function membership_entity_type_get_name($membership) {
  $names = membership_entity_get_type_names();
  return isset($names[$membership->type]) ? $names[$membership->type] : '';
}

/**
 * Rebuilds membership type information.
 */
function membership_entity_types_rebuild() {
  membership_entity_get_types(TRUE);
}

/**
 * Saves a membership type to the database.
 *
 * @param $type
 *   The membership type to save, as an object.
 *
 * @return
 *   Status flag indicating outcome of the operation.
 */
function membership_entity_type_save($type) {
  $type_exists = (bool) db_query_range('SELECT 1 FROM {membership_entity_type} WHERE type = :type', 0, 1, array(':type' => $type->type))->fetchField();

  $fields = array(
    'type' => (string) $type->type,
    'name' => (string) $type->name,
    'description' => (string) $type->description,
  );

  if ($type_exists) {
    db_update('membership_entity_type')
      ->fields($fields)
      ->condition('type', $type->type)
      ->execute();

    // Allow other modules to act on a membership type update.
    module_invoke_all('membership_entity_type_update', $type);
    $status = SAVED_UPDATED;
  }
  else {
    db_insert('membership_entity_type')
      ->fields($fields)
      ->execute();

    // Notify field api of the new bundle.
    field_attach_create_bundle('membership_entity', $type->type);

    // Allow other modules to act on a new membership type insert.
    module_invoke_all('membership_entity_type_insert', $type);
    $status = SAVED_NEW;
  }

  // Rebuild the membership types and menus.
  membership_entity_types_rebuild();
  menu_rebuild();
  return $status;
}

/**
 * Deletes a membership type from the database.
 *
 * @param $type
 *   The membership type object to be deleted.
 */
function membership_entity_type_delete($type) {
  db_delete('membership_entity_type')
    ->condition('type', $type->type)
    ->execute();

  // Delete the field instances,
  field_attach_delete_bundle('membership_entity', $type->type);

  // Allow other modules to act on a membership type deletion.
  module_invoke_all('membership_entity_type_delete', $type);

  // Rebuild the membership types and menus.
  membership_entity_types_rebuild();
  menu_rebuild();
}

/**
 * Implements hook_membership_entity_type_delete.
 */
function membership_entity_membership_entity_type_delete($type) {
  // Remove membership type variables. We can't use variable_del() because
  // we need to query the vairable name.
  db_delete('variable')
    ->condition('name', 'membership_entity_%_' . $type->type, 'LIKE')
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Implements hook_cron().
 */
function membership_entity_cron() {
  // @TODO: Disable expired memberships.
}

/**
 * Title callback for a membership type.
 */
function membership_entity_type_page_title($type) {
  return $type->name;
}

/**
 * Implements hook_forms().
 */
function membership_entity_forms() {
  $forms = array();
  if ($types = membership_entity_get_types()) {
    foreach ($types as $type) {
      $forms[$type->type . '_membership_entity_edit_form']['callback'] = 'membership_entity_edit_form';
    }
  }
  return $forms;
}

/**
 * Implements hook_field_extra_fields().
 */
function membership_entity_field_extra_fields() {
  $extra = array();

  foreach (membership_entity_get_types() as $type) {
    $extra['membership_entity'][$type->type] = array(
      'form' => array(
        'member_id' => array(
          'label' => t('Member ID'),
          'description' => t('A unique member id for this membership.'),
          'weight' => 0,
        ),
      ),
    );
  }

  return $extra;
}

/**
 * Add default fields to a membership entity type.
 *
 * @param $type
 *   A membership entity type object.
 */
function membership_entity_add_fields($type) {
  // Add the join and expiration date fields.
  $fields = array(
    'membership_entity_join' => array(
      'type' => 'datetime',
      'cardinality' => 1,
      'settings' => array(
        'granularity' => drupal_map_assoc(array('year', 'month', 'day')),
      ),
    ),
    'membership_entity_expire' => array(
      'type' => 'datetime',
      'cardinality' => 1,
      'settings' => array(
        'granularity' => drupal_map_assoc(array('year', 'month', 'day')),
      ),
    ),
  );

  $instances = array(
    'membership_entity_join' => array(
      'label' => t('Join Date'),
      'widget' => array(
        'type' => 'date_text',
        'weight' => 97,
        'settings' => array(
          'year_range' => '-29:+1',
        ),
      ),
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'date_default',
          'settings' => array(
            'format_type' => 'short',
           ),
        ),
      ),
    ),
    'membership_entity_expire' => array(
      'label' => t('Expiration Date'),
      'widget' => array(
        'type' => 'date_text',
        'weight' => 98,
        'settings' => array(
          'year_range' => '0:+30',
        ),
      ),
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'date_default',
          'settings' => array(
            'format_type' => 'short',
          ),
        ),
      ),
    ),
  );

  // Add the additional members field if cardinality is not 1.
  $cardinality = (int) variable_get('membership_entity_cardinality_' . $type->type, 0);
  if ($cardinality > 1 || $cardinality == FIELD_CARDINALITY_UNLIMITED) {
    // We must create a separate member reference field for each membership type
    // because we can only control cardinality at the field level.
    $fields[$type->type . '_members'] = array(
      'type' => 'entityreference',
      // Subtract 1 for primary member (unless unlimited).
      'cardinality' => ($cardinality == FIELD_CARDINALITY_UNLIMITED) ? FIELD_CARDINALITY_UNLIMITED : $cardinality - 1,
      'settings' => array(
        'target_type' => 'user',
      ),
    );

    $instances[$type->type . '_members'] = array(
      'label' => t('Additional Members'),
      'widget' => array(
        'type' => 'entityreference_autocomplete',
        'weight' => 99,
      ),
      'display' => array(
        'full' => array(
          'label' => 'above',
          'type' => 'entityreference_entity_id',
        ),
      ),
    );
  }

  // Create the fields.
  foreach ($fields as $field_name => $settings) {
    $field = field_info_field($field_name);
    if (empty($field)) {
      $field = array_merge(array(
        'field_name' => $field_name,
        'entity_types' => array('membership_entity'),
        'locked' => TRUE, // No editing allowed!
      ), $settings);
      $field = field_create_field($field);
    }
  }

  // Create the instances.
  foreach ($instances as $field_name => $settings) {
    $instance = field_info_instance('membership_entity', $field_name, $type->type);
    if (empty($instance)) {
      $instance = array_merge(array(
        'field_name' => $field_name,
        'entity_type' => 'membership_entity',
        'bundle' => $type->type,
      ), $settings);
      $instance = field_create_instance($instance);
    }
  }
}

/**
 * Implements hook_membership_entity_operations().
 */
function membership_entity_membership_entity_operations() {
  return array(
    'delete' => array(
      'label' => t('Delete selected memberships'),
      'callback' => NULL,
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function membership_entity_entity_info() {
  $info['membership_entity'] = array(
    'label' => t('Membership'),
    'controller class' => 'MembershipEntityController',
    'base table' => 'membership_entity',
    'uri callback' => 'membership_entity_uri',
    'fieldable' => TRUE,
    'entity keys' => array(
      'id' => 'mid' ,
      'bundle' => 'type',
    ),
    'bundle keys' => array(
      'bundle' => 'type',
    ),
    'static cache' => TRUE,
    'bundles' => array(),
    'view modes' => array(
      'full' => array(
        'label' => t('Full Membership'),
        'custom settings' =>  FALSE,
      ),
      'account' => array(
        'label' => t('User account page'),
        'custom settings' =>  FALSE,
      ),
    )
  );

  // Add user defined bundles.
  foreach (membership_entity_get_types() as $bundle => $type) {
    $info['membership_entity']['bundles'][$bundle] = array(
      'label' => $type->name,
      'admin' => array(
        'path' => 'admin/structure/membership-types/manage/%membership_entity_type',
        'real path' => 'admin/structure/membership-types/manage/' . str_replace('_', '-', $type->type),
        'bundle argument' => 4,
        'access arguments' => array('administer membership types'),
      ),
    );
  }

  return $info;
}

/**
 * Load a membership object.
 *
 * @param $mid
 *   Integer specifying the membership entity id.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded membership object or FALSE if it cannot be loaded.
 */
function membership_entity_load($mid = NULL, $reset = FALSE) {
  $mids = isset($mid) ? array($mid) : array();
  $membership = membership_entity_load_multiple($mids, array(), $reset);
  return $membership ? reset($membership) : FALSE;
}

/**
 * Load all memberships for a given user.
 *
 * @param $account
 *  A user account object or uid.
 * @param $type
 *  Load a specific membership type.
 */
function membership_entity_load_by_user($account, $type_name = NULL) {
  // Support uid or entire user object.
  $uid = is_object($account) ? $account->uid : $account;
  $cache = &drupal_static(__FUNCTION__, array());
  if (!isset($cache[$uid])) {
    if (empty($type_name)) {
      foreach (membership_entity_get_types() as $type) {
        $cache[$uid][$type->type] = membership_entity_load_by_user($uid, $type->type);
      }
    }
    else {
      $mids = array();
      // Load primary memberships.
      $efq = new EntityFieldQuery();
      $result = $efq->entityCondition('entity_type', 'membership_entity')
        ->entityCondition('bundle', $type_name)
        ->propertyCondition('uid', $uid)
        ->execute();
      if (!empty($result)) {
        $mids = array_merge($mids, array_keys($result['membership_entity']));
      }

      // Load secondary memberships.
      $efq = new EntityFieldQuery();
      $result = $efq->entityCondition('entity_type', 'membership_entity')
        ->entityCondition('bundle', $type_name)
        ->fieldCondition($type_name . '_members', 'target_id', $uid)
        ->execute();

      if (!empty($result)) {
        $mids = array_merge($mids, array_keys($result['membership_entity']));
      }

      $cache[$uid][$type_name] = membership_entity_load_multiple($mids);
    }
  }
  return !empty($type_name) ? $cache[$uid][$type_name] : $cache[$uid];
}

/**
 * Loads multiple membership objects.
 */
function membership_entity_load_multiple($mids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('membership_entity', $mids, $conditions, $reset);
}

/**
 * Menu callback: Display a membership.
 *
 * Invokes a number of hooks to prepare the membershp for display.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function membership_entity_view($membership, $view_mode = 'full') {
  $entity_type = 'membership_entity';
  $type = membership_entity_type_load($membership->type);

  $membership->content = array(
    '#view_mode' => $view_mode,
  );

  if ($view_mode == 'full') {
    drupal_set_title(t('@type: @id', array(
      '@type' => $type->name,
      '@id' => $membership->member_id,
    )));
  }

  // Build custom field content.
  field_attach_prepare_view($entity_type, array($membership->mid => $membership), $view_mode);
  entity_prepare_view($entity_type, array($membership->mid => $membership));
  $membership->content += field_attach_view($entity_type, $membership, $view_mode);

  // Display the membership on user account pages.
  if ($view_mode == 'account' && variable_get('membership_entity_show_on_profile_' . $membership->type)) {
    $membership->content = array(
      '#type' => 'fieldset',
      '#title' => t('@type: @member_id', array(
        '@type' => $type->name,
        '@member_id' => $membership->member_id,
      )),
      'content' => $membership->content,
      'links' => array(
        '#theme_wrappers' => array('container'),
        '#attributes' => array(
          'class' => array('membership-entity-links'),
        ),
        '#weight' => 99,
        'view' => array(
          '#theme' => 'link',
          '#text' => t('View full membership'),
          '#path' => 'membership/' . $membership->mid,
          '#options' => array(
            'attributes' => array(),
            'html' => FALSE,
          ),
          '#access' => membership_entity_access('view', $membership),
        ),
        'edit' => array(
          '#theme' => 'link',
          '#text' => t('Edit membership'),
          '#path' => 'membership/' . $membership->mid . '/edit',
          '#options' => array(
            'attributes' => array(),
            'html' => FALSE,
          ),
          '#access' => membership_entity_access('edit', $membership),
        ),
      ),
    );
  }

  // Invoke hook_entity_view() and hook_entity_view_alter().
  $langcode = $GLOBALS['language']->language ;
  module_invoke_all('entity_view', $membership, $entity_type, $view_mode, $langcode);
  drupal_alter(array('entity_membership_entity_view', 'entity_view'), $membership->content, $entity_type);

  return $membership->content;
}

/**
 * Entity uri callback.
 */
function membership_entity_uri($membership) {
  return array(
    'path' => 'membership/' . $membership->mid,
  );
}

/**
 * Increment and return the next available member id.
 */
function membership_entity_next_member_id() {
  $member_id = variable_get('membership_entity_next_member_id', 0);

  // Increment until we find an available member id.
  while ((bool) db_select('membership_entity', 'me')->fields('me', array('mid'))->condition('member_id', db_like($member_id), 'LIKE')->range(0, 1)->execute()->fetchField()) {
    $member_id++;
  }

  variable_set('membership_entity_next_member_id', $member_id + 1);
  return $member_id;
}

/**
 * Save a membership entity.
 */
function membership_entity_save(&$membership) {
  return entity_get_controller('membership_entity')
    ->save($membership);
}

/**
 * Delete a membership entity.
 */
function membership_entity_delete($mid) {
  membership_entity_delete_multiple(array($mid));
}

/**
 * Delete multiple membership entities.
 */
function membership_entity_delete_multiple($mids) {
  entity_get_controller('membership_entity')
    ->delete_multiple($mids);
}
