<?php

/**
 * @file
 * Allows users to create membership entities.
 */

/**
 * Membership is disabled.
 */
define('MEMBERSHIP_ENTITY_DISABLED', 0);

/**
 * Membership is active.
 */
define('MEMBERSHIP_ENTITY_ACTIVE', 1);

/**
 * Implements hook_help().
 */
function membership_entity_help($path, $arg) {
  switch ($path) {
    case 'admin/config/meberships/settings':
      return '<p>' . t('This page provides general settings for memberships on your website.') . '</p>';
  }
}

/**
 * Implements hook_permission().
 */
function membership_entity_permission() {
  return array(
    'adminster memberships' => array(
      'title' => t('Administer Memberships'),
      'description' => t('Perform administration tasks for memberships.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function membership_entity_menu() {
  $items = array();

  $items['admin/structure/membership-types'] = array(
    'title' => 'Membership types',
    'description' => 'Manage membership types.',
    'page callback' => 'membership_entity_types',
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.types.inc',
  );
  $items['admin/structure/membership-types/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/structure/membership-types/add'] = array(
    'title' => 'Add a membership type',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_type_form'),
    'access arguments' => array('administer memberships'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'membership_entity.types.inc',
  );
  $items['admin/structure/membership-types/manage/%membership_entity_type'] = array(
    'title' => 'Edit membership type',
    'title callback' => 'membership_entity_type_page_title',
    'title arguments' => array(4),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_type_form', 4),
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.types.inc',
  );
  $items['admin/structure/membership-types/manage/%membership_entity_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/structure/membership-types/manage/%membership_entity_type/delete'] = array(
    'title' => 'Delete',
    'page arguments' => array('membership_entity_type_confirm_delete', 4),
    'access arguments' => array('administer memberships'),
    'file' => 'membership_entity.types.inc',
  );
  $items['admin/config/membership-entity/settings'] = array(
    'title' => 'Membership settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('membership_entity_admin_settings_form'),
    'access arguments' => array('administer memberships'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'membership_entity.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function membership_entity_admin_paths() {
  return array(
    'admin/config/membership-entity/*' => TRUE,
    // @TODO.
  );
}

/**
 * Implements hook_theme().
 */
function membership_entity_theme() {
  return array(
    // @TODO: Theme a membership
  );
}

/**
 * Menu argument loader: loads a membership type by machine name.
 *
 * @param $name
 *   The machine name name of a node type to load, '_' is replaced with '-'.
 *
 * @return
 *   A membership type object or FALSE if $name does not exist.
 */
function membership_entity_type_load($name) {
  $types = membership_entity_get_types();
  $machine_name = str_replace('-', '_', $name);
  return isset($types[$machine_name]) ? $types[$machine_name] : FALSE;
}

/**
 * Returns a list of membership types.
 *
 * @param $rebuild
 *  TRUE to rebuild the membership types cache.
 */
function membership_entity_get_types($rebuild = FALSE) {
  $cid = 'membership_entity_types';

  if (!$rebuild) {
    // Check the static cache.
    $types = &drupal_static(__FUNCTION__);
    if (isset($types)) {
      return $types;
    }

    // Check the database cache.
    if ($cache = cache_get($cid)) {
      $types = $cache->data;
      return $types;
    }
  }

  $types = array();

  $results = db_select('membership_entity_type', 'met')
    ->fields('met')
    ->orderBy('met.type', 'ASC')
    ->execute();

  foreach ($results as $result) {
    $types[$result->type] = $result;
  }

  cache_set($cid, $types);
  return $types;
}

/**
 * Returns a list of membership type names.
 */
function membership_entity_get_type_names() {
  $types = membership_entity_get_types();
  $names = array();
  foreach ($types as $type) {
    $names[$type->type] = $type->name;
  }
  return $names;
}

/**
 * Rebuilds membership type information.
 */
function membership_entity_types_rebuild() {
  membership_entity_get_types(TRUE);
}

/**
 * Saves a membership type to the database.
 *
 * @param $type
 *   The membership type to save, as an object.
 *
 * @return
 *   Status flag indicating outcome of the operation.
 */
function membership_entity_type_save($type) {
  $type_exists = (bool) db_query_range('SELECT 1 FROM {membership_entity_type} WHERE type = :type', 0, 1, array(':type' => $type->type))->fetchField();

  $fields = array(
    'type' => (string) $type->type,
    'name' => (string) $type->name,
    'description' => (string) $type->description,
  );

  if ($type_exists) {
    db_update('membership_entity_type')
      ->fields($fields)
      ->condition('type', $type->type)
      ->execute();

    // Allow other modules to act on a membership type update.
    module_invoke_all('membership_entity_type_update', $type);
    $status = SAVED_UPDATED;
  }
  else {
    db_insert('membership_entity_type')
      ->fields($fields)
      ->execute();

    // @TODO: field_attach_create_bundle('membership_entity', $type->type);

    // Allow other modules to act on a new membership type insert.
    module_invoke_all('membership_entity_type_insert', $type);
    $status = SAVED_NEW;
  }

  // Rebuild the membership types and menus.
  membership_entity_types_rebuild();
  menu_rebuild();
  return $status;
}

/**
 * Deletes a membership type from the database.
 *
 * @param $type
 *   The type object type to be deleted.
 */
function membership_entity_type_delete($type) {
  db_delete('membership_entity_type')
    ->condition('type', $type->type)
    ->execute();

  // @TODO: field_attach_delete_bundle('membership_entity', $type);

  // Allow other modules to act on a membership type deletion.
  module_invoke_all('membership_entity_type_delete', $type);

  // Rebuild the membership types and menus.
  membership_entity_types_rebuild();
  menu_rebuild();
}

/**
 * Implements hook_membership_enitty_type_delete.
 */
function membership_entity_membership_entity_type_delete($type) {
  // Remove membership type variables. We can't use variable_del() because
  // we need to query the vairable name.
  db_delete('variable')
    ->condition('name', 'membership_entity_%_' . $type->type, 'LIKE')
    ->execute();
  cache_clear_all('variables', 'cache_bootstrap');
}

/**
 * Implements hook_entity_info().
 */
/*
function membership_entity_entity_info() {
  $info = array(
    'membership' => array(
      'label' => t('Membership'),
      //'controller class' => 'MembershipController',
      'base table' => 'membership_entity',
      'uri callback' => 'membership_entity_uri',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'mid',
        'bundle' => 'type',
        'label' => 'member_id',
      ),
      'bundle keys' => array(
        'bundle' => 'type',
      ),
      'bundles' => array(),
      'view modes' => array(
        'full' => array(
          'label' => t('Full membership'),
          'custom settings' => FALSE,
        ),
      ),
    ),
  );

  // Bundles must provide a human readable name so we can create help and error
  // messages, and the path to attach Field admin pages to.
  foreach (node_type_get_names() as $type => $name) {
    $return['node']['bundles'][$type] = array(
      'label' => $name,
      'admin' => array(
        'path' => 'admin/structure/types/manage/%node_type',
        'real path' => 'admin/structure/types/manage/' . str_replace('_', '-', $type),
        'bundle argument' => 4,
        'access arguments' => array('administer content types'),
      ),
    );
  }

  return $info;
}
*/

/**
 * Entity URI callback.
 */
/*
function membership_entity_uri($membership) {
  return array(
    'path' => 'membership/' . $membership->mid,
  );
}
*/

/**
 * Implements hook_cron().
 */
function membership_entity_cron() {
  // @TODO: Disable expired memberships.
}

/**
 * Title callback for a membership type.
 */
function membership_entity_type_page_title($type) {
  return $type->name;
}
